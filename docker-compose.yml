

services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 10
    
  init-kafka:
    build:
      context: ./kafka
      dockerfile: DockerFile
    container_name: init-kafka
    depends_on:
      kafka:
        condition: service_healthy

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_URL: http://localhost:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka:9092
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
    healthcheck:
      test: ["CMD", "curl", "--output", "/dev/null", "--silent", "--head", "--fail", "http://localhost:8081/subjects"]
      interval: 10s
      timeout: 5s
      retries: 10
    
  init-schema-registry:
    build:
      context: ./schema_registry
      dockerfile: DockerFile
    container_name: init-schema-registry
    environment:
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    depends_on:
      schema-registry:
        condition: service_healthy

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    ports:
      - "9042:9042"
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe cluster"]
      interval: 30s
      timeout: 120s
      retries: 5

  init-cassandra:
    build:
      context: ./cassandra
      dockerfile: DockerFile
    container_name: init-cassandra
    depends_on:
      cassandra:
        condition: service_healthy

  ml_model:
    build:
      context: ./ml_model
      dockerfile: DockerFile
    container_name: ml_model
    image: dareeed/fraud_detection_project-ml_model:latest
    ports:
      - "8888:8888" 
    volumes:
      - type: bind
        source: ./ml_model/py_files
        target: /app/py_files
      - type: bind
        source: ./ml_model/csv_files
        target: /app/csv_files
    stdin_open: true  
    tty: true

  pyspark:
    build: 
      context: ./pyspark
      dockerfile: DockerFile
    container_name: pyspark
    ports:
      - "8889:8888" 
    depends_on:
      - init-cassandra
      - init-schema-registry
    volumes:
      - ./pyspark/py_files:/app/py_files
      - ./pyspark/preprocessors:/app/preprocessors
      - ./pyspark/models:/app/models
      - ./pyspark/csv:/app/csv
      - ./pyspark/json:/app/json
      - ./pyspark/schemas:/app/schemas
